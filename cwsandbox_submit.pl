#!/usr/bin/perl
use strict;
use warnings;

# We are storing the configuration file in INI format
use Config::IniHash;
use Dir::Self;

# We need to interact with Amazon SimpleDB
use Amazon::SimpleDB::Client;

# We need to pretend to be a browser as we send data to CWSandbox
use LWP::UserAgent;
use HTTP::Request::Common;
use HTML::LinkExtor;
use Data::Dumper;

# We need to interact with Amazon SQS
use Amazon::SQS::Simple;

# We need to interact with Amazon SimpleDB
use Amazon::SimpleDB::Client;

use MDBAWS;

# Configuration
my $config = ReadINI( __DIR__ . "/config.ini" );

my %metadata         = ();
my %new_metadata     = ();
my $browser          = LWP::UserAgent->new();
my $email            = "michael\@malwaredatabase.net";
my $cwsandbox_report = "undefined";

#################################
# Pick up a ticket from the SQS #
#################################
my $sqs =
  new Amazon::SQS::Simple( $config->{'aws'}->{'aws_access_key_id'}, $config->{'aws'}->{'aws_secret_access_key'} );

my $queue =
  $sqs->GetQueue(
    $config->{'aws'}->{'sqs_url'} . $config->{'aws'}->{'sqs_prefix'} . $config->{'cwsandbox'}->{'in_queue'} );

##################################
# Get the metadata from SimpleDB #
##################################

my $simpledb =
  Amazon::SimpleDB::Client->new( $config->{'aws'}->{'aws_access_key_id'}, $config->{'aws'}->{'aws_secret_access_key'} );

while (1) {
    my $msg = $queue->ReceiveMessage();

    if ( !defined($msg) ) {
        print "DEBUG: No tickets in the queue, sleeping...\n";
        sleep(300);
    }
    elsif ( $msg->MessageBody() =~ m/e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855/ ) {

        # If the ticket refers to an empty sample
        # ("e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855")
        # then delete it immidialty
        print "DEBUG: Deleting SQS ticket (empty): " . $msg->MessageBody() . "\n";
        $queue->DeleteMessage( $msg->ReceiptHandle() );
        exit;
    }
    else {

        print "DEBUG: Picked up SQS ticket: " . $msg->MessageBody() . "\n";
        my $response = $simpledb->getAttributes(
            {
                DomainName => $config->{'aws'}->{'simpledb_name'},
                ItemName   => $msg->MessageBody()
            }
        );

        # Feed the SimpleDB data into an hash
        if ( $response->isSetGetAttributesResult() ) {
            my $getAttributesResult = $response->getGetAttributesResult();
            my $attributeList       = $getAttributesResult->getAttribute();
            foreach (@$attributeList) {
                my $attribute = $_;
                $metadata{ $attribute->getName() } = $attribute->getValue();
            }
        }

        if ( defined( $metadata{'sha256'} ) ) {
            my $file = MDBAWS::s3_get_file( $config->{'aws'}->{'bucketname'}, $metadata{'zipname'} );

            my $file_upload_request = POST 'http://www.cwsandbox.org/?page=submit',
              [
                'upfile' => [$file],
                'email'  => $email
              ],
              'Content_Type' => 'form-data';

            my $parser = HTML::LinkExtor->new();

            my $response = $browser->request($file_upload_request);

            if ( $response->is_success ) {
                if (
                    ( $response->decoded_content =~ m/You\ have\ already\ submitted\ this\ sample./ )
                    || ( $response->decoded_content =~
                        m/The\ sample\ you\ have\ submitted\ is\ now\ scheduled\ for\ analysis./ )
                  )
                {
                    print "Sample successfully submitted. Fetching report.\n";
                    $parser->parse( $response->decoded_content );
                    my $base = $response->base;

                    foreach my $link ( $parser->links ) {
                        if ( $link->[2] =~ m/page=details/ ) {
                            my $details_page = "http://www.cwsandbox.org" . $link->[2];
                            print "Found the details page: $details_page\n";

                            $new_metadata{'cwsandbox_detailspage'} = $details_page;

                            my $response = $browser->request( GET $details_page );
                            if ( $response->is_success ) {
                                $parser->parse( $response->decoded_content );
                                foreach $link ( $parser->links ) {
                                    if (
                                        $link->[2] =~ m/page=download&dltype=pcap&id=([0-9]+)&password=([A-Za-z0-9]+)/ )
                                    {

                                        # Found the PCAP link, time to work some
                                        # magic and extract the XML URL
                                        my ( $analysisid, $password ) = ( $1, $2 );
                                        print "Analysis ID: " . $analysisid . "\n";
                                        $cwsandbox_report =
                                            "http://www.cwsandbox.org/"
                                          . "?page=analysis"
                                          . "&format=xml"
                                          . "&analysisid=$analysisid"
                                          . "&password=$password";

                                        $new_metadata{'cwsandbox_reportpage'} = $cwsandbox_report;
                                        print "CWSandbox XML Report URL: " . $cwsandbox_report . "\n";
                                        $cwsandbox_report = "undefined";

                                    }
                                }
                            }
                            else {
                                die $response->status_line;
                            }

                            ###############################
                            # Upload metadata to SimpleDB #
                            ###############################

                            my @attributes = ();

                            # Put the metadata hash into an array, just like how SimpleDB wants it
                            for my $key ( keys %new_metadata ) {
                                my $value = $new_metadata{$key};

                                @attributes = {
                                    Name    => $key,
                                    Value   => $value,
                                    Replace => ''
                                };

                                my $response = $simpledb->putAttributes(
                                    {
                                        DomainName => $config->{'aws'}->{'simpledb_name'},
                                        ItemName   => $metadata{'sha256'},
                                        Attribute  => @attributes
                                    }
                                );
                            }

                        }
                    }
                }
            }
        }
        else {
            die $response->status_line;
        }

    }

    ########################
    # Create SQS Ticket(s) #
    ########################

    my (@out_queues) =
      split( /,/, $config->{'cwsandbox'}->{'out_queue'} );
    my $out_queue;
    foreach $out_queue (@out_queues) {
        my $queuename = $config->{'aws'}->{'sqs_prefix'} . $out_queue;
        print "DEBUG: Creating SQS Queue: $queuename\n";
        my $q = $sqs->CreateQueue($queuename);
        print "DEBUG: Putting " . $msg->MessageBody() . " into $queuename\n";
        $q->SendMessage( $msg->MessageBody() );
    }
    print "DEBUG: Deleting SQS ticket: " . $msg->MessageBody() . "\n";
    $queue->DeleteMessage( $msg->ReceiptHandle() );
}

