package MDBAWS;

# Stop us from shooting outselves in the foot
use strict;
use warnings;

# We are storing the configuration file in INI format
use Config::IniHash;
use Dir::Self;
use File::Temp qw( tempdir );
use File::Basename;

# We need to interact with Amazon S3
use Net::Amazon::S3;
use Net::Amazon::S3::Bucket;

# We need to interact with Amazon SimpleDB
use Amazon::SimpleDB::Client;

# We need to interact with Amazon SQS
use Amazon::SQS::Simple;

use MDBUtils;

#################################################
# Save the Sample to S3 and record the metadata #
#################################################
# store_sample( $filename, %metadata );
sub store_sample {
    my ($filename, %metadata) = shift or die("FUNCTION USAGE: store_sample( filename, metadata );\n");
    print "DEBUG: store_sample( " . $filename . " );\n";

    my $config = ReadINI( __DIR__ . "/config.ini" );

    if( ! $metadata{'rcvd_DateTime'} ) {
	    $metadata{'rcvd_DateTime'} = DateTime->now();
    }

    if( ! $metadata{'submitter'} ) {
	    $metadata{'submitter'} = $config->{'default'}->{'submitter'};
    }

    $metadata{'original_filename'} = basename($filename);
    my $dir = tempdir( CLEANUP => 1 );

    ##################################
    # Setup the SimpleDB environment #
    ##################################

    my $simpledb = Amazon::SimpleDB::Client->new(
        $config->{'aws'}->{'aws_access_key_id'},
        $config->{'aws'}->{'aws_secret_access_key'}
    );

    my $response = $simpledb->createDomain(
        { DomainName => $config->{'aws'}->{'simpledb_name'} } );

    #############################
    # Setup the SQS environment #
    #############################

    my $sqs = new Amazon::SQS::Simple(
        $config->{'aws'}->{'aws_access_key_id'},
        $config->{'aws'}->{'aws_secret_access_key'}
    );

    ########################
    # Checksum the payload #
    ########################

    $metadata{'sha256'} = MDBUtils::mdb_sha256_hex($filename);  # Calculate SHA256 checksum
    $metadata{'sha1'}   = MDBUtils::mdb_sha1_hex($filename);    # Calculate SHA1 checksum
    $metadata{'md5'}    = MDBUtils::mdb_md5_hex($filename);     # Calculate MD5 checksum

    $metadata{'size'} = -s $filename;

    ########################
    # Create a ZIP archive #
    ########################

    # Define the filename of the ZIP archive
    $metadata{'zipname'} = $metadata{'sha256'} . ".zip";

    # Zip the payload
    print "DEBUG: Creating ZIP archive ["
      . $metadata{'zipname'}
      . "] to upload\n";
    my $zip = Archive::Zip->new();

    $zip->addFile( $filename, $metadata{'original_filename'} );
    $zip->writeToFileNamed( $dir . $metadata{'zipname'} );

    ################################
    # Upload the ZIP archive to S3 #
    ################################

    s3_put_file( $config->{'aws'}->{'bucketname'}, $dir . $metadata{'zipname'}, $metadata{'zipname'} );

    $metadata{'sample_url'} =
      "http://" . $config->{'aws'}->{'bucketname'} . "/" . $metadata{'zipname'};

    # Delete the temp ZIP file
    unlink( $dir . $metadata{'zipname'} );

    ###############################
    # Upload metadata to SimpleDB #
    ###############################

    my @attributes = ();

    # Put the metadata hash into an array, just like how SimpleDB wants it
    for my $key ( keys %metadata ) {
        my $value = $metadata{$key};

        @attributes = {
            Name    => $key,
            Value   => $value,
            Replace => ''
        };

        my $response = $simpledb->putAttributes(
            {
                DomainName => $config->{'aws'}->{'simpledb_name'},
                ItemName   => $metadata{'sha256'},
                Attribute  => @attributes
            }
        );
    }

    ########################
    # Create SQS Ticket(s) #
    ########################

    my (@out_queues) = split( /,/, $config->{'store_sample'}->{'out_queue'} );
    my $out_queue;
    foreach $out_queue (@out_queues) {
        my $queuename = $config->{'aws'}->{'sqs_prefix'} . $out_queue;
        print "DEBUG: Creating SQS Queue: $queuename\n";
        my $q = $sqs->CreateQueue($queuename);
        print "DEBUG: Putting $metadata{'sha256'} into $queuename\n";
        $q->SendMessage( $metadata{'sha256'} );
    }
}

sub s3_put_file
{
    my ($bucketname, $file, $filename ) = shift;

    if (! $filename ) {
	    $filename = $file;
    }

    my $config = ReadINI( __DIR__ . "/config.ini" );

    my $s3 = Net::Amazon::S3->new(
        aws_access_key_id     => $config->{'aws'}->{'aws_access_key_id'},
        aws_secret_access_key => $config->{'aws'}->{'aws_secret_access_key'},
        retry                 => 1
    );

    my $bucket = $s3->bucket( $bucketname );
    my $ok = $bucket->add_key_filename( $filename, $file );

    if ( !$ok ) {
        print "ERROR: s3->add_key_filename( ) failed: " . $bucket->errstr() . "\n";
    }
}

sub s3_get_file
{
    my ($bucketname, $filename ) = @_;
    my $config = ReadINI( __DIR__ . "/config.ini" );
    my $dir = tempdir( CLEANUP => 1 );
    my $local_filename = $dir . $filename;

    my $s3 = Net::Amazon::S3->new(
        aws_access_key_id     => $config->{'aws'}->{'aws_access_key_id'},
        aws_secret_access_key => $config->{'aws'}->{'aws_secret_access_key'},
        retry                 => 1
    );

    my $bucket = $s3->bucket( $bucketname );
    my $ok = $bucket->get_key_filename( $filename, "GET", $local_filename );

    if ( !$ok ) {
        print "ERROR: s3->get_key_filename() failed: " . $bucket->errstr() . "\n";
    } else {
    	return( $local_filename );
    }
}

1;
