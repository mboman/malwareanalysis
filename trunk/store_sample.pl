#!/usr/bin/perl

# Stop us from shooting outselves in the foot
use strict;
use warnings;
use Switch;

# We need to parse emails
use Email::Simple;
use Email::MIME::Attachment::Stripper;
use Date::Format;
use DateTime::Format::Mail;

# We need to calculate checksums
use Digest::SHA256;
use Digest::SHA1 qw( sha1_hex );
use Digest::MD5::File qw( file_md5_hex );

# We need to handle compression
use Archive::Zip;
use Archive::Extract;
use File::Temp qw( tempdir );
use File::Magic;
use File::Spec;
use File::Basename;

# We need to interact with Amazon S3
use Net::Amazon::S3;
use Net::Amazon::S3::Bucket;

# We need to interact with Amazon SimpleDB
#use Amazon::SimpleDB;
#use Amazon::SimpleDB::Domain;

# We need to interact with MediaWiki
use CMS::MediaWiki;

# We need to interact with Amazon SQS

# Local sub routines
sub dump_meta;
sub file_to_string;
sub my_md5_hex;
sub my_sha1_hex;
sub my_sha256_hex;
sub process_file;
sub store_sample;
sub string_to_file;
sub unpack_zip;
sub update_wiki;

# Configuration
my %config = (

    # We really should locate the credentials to a config file
    'aws_access_key_id'     => 'AWS_ACCESS_KEY_ID',
    'aws_secret_access_key' => 'AWS_SECRET_ACCESS_KEY',
    'mediawiki_username'    => 'WIKI_USERNAME',
    'mediawiki_password'    => 'WIKI_PASSWORD',

    # Less dynamic settings
    'bucketname'     => 'samples.malwaredatabase.net',
    'simpledb_name'  => 'samples.malwaredatabase.net',
    'mediawiki_host' => 'www.malwaredatabase.net',
    'mediawiki_path' => 'w'
);

# BEGIN
# Our variables..
my %metadata = ();
my $response;
my $raw_input;

# Setup the environment
$metadata{'rcvd_DateTime'} = DateTime->now();
my $dir = tempdir( CLEANUP => 1 );

############################
# Setup the S3 environment #
############################

my $s3 = Net::Amazon::S3->new(
    aws_access_key_id     => $config{'aws_access_key_id'},
    aws_secret_access_key => $config{'aws_secret_access_key'},
    retry                 => 1
);

my $bucket = $s3->bucket( $config{'bucketname'} );

##################################
# Setup the SimpleDB environment #
##################################

#my $simpledb = Amazon::SimpleDB->new(
#    aws_access_key_id     => $config{'aws_access_key_id'},
#    aws_secret_access_key => $config{'aws_secret_access_key'}
#);

#$simpledb->create_domain($config{'simpledb_name'});

# Concatinate the input to a single string
while (<STDIN>) {
    $raw_input = $raw_input . $_;
}

my $email    = Email::Simple->new($raw_input);
my $stripper = Email::MIME::Attachment::Stripper->new($raw_input);

# Extract the header metadata
$metadata{'From'} = $email->header("From");
$metadata{'sent_DateTime'} =
  DateTime::Format::Mail->parse_datetime( $email->header("Date") );

# Convert the timestamps to GMT timezone
$metadata{'sent_DateTime'}->set_time_zone("GMT");
$metadata{'rcvd_DateTime'}->set_time_zone("GMT");

$metadata{'bucketpath'} = $metadata{'sent_DateTime'}->ymd("/");

# Extract the attachments
my @attachments       = $stripper->attachments;
my $no_of_attachments = scalar(@attachments);

# For each attachment in the email...
for ( my $count = 0 ; $count < $no_of_attachments ; $count++ ) {

    my $filename = $dir . "/" . $attachments[$count]{'filename'};

    string_to_file( $filename, $attachments[$count]{'payload'} );
    process_file($filename);
}
print "Processed all the attachments\n\n";
exit;    # END OF PROGRAM

# Process the file
sub process_file() {
    my $filename = shift;

    print "DEBUG: process_file( " . $filename . " );\n";

    my $magic = File::Magic->new();
    my $filetype = $magic->type($filename);

    print "DEBUG: File::Magic filetype: " . $filetype . "\n";

    # What kind of content do we have?
    switch ( $filetype ) {
        case /executable/ {
            store_sample($filename);
        }
        case /Zip/ {
            unpack_zip($filename);
        }
        case /RAR/ {
            unpack_attachment_rar($filename);
        }

        # Oh-oh! Danger! Danger! Need to send sample for manual analysis here
    }
}

sub dump_meta() {
    #####################
    # "Debugging" tools #
    #####################

    print "\nvvvv DUMP OF METADATA vvvvv\n";
    for my $key ( keys %metadata ) {
        my $value = $metadata{$key};
        print "$key => $value\n";
    }
    print "^^^^ DUMP OF METADATA ^^^^^\n\n";
}

#######################
# Extract the archive #
#######################
sub unpack_zip {
    my $filename = shift;

    print "DEBUG: unpack_zip( " . $filename . " );\n";

    my $ae = Archive::Extract->new( archive => $filename );
    my $ok = $ae->extract( to => $dir );
    my $files = $ae->files;

    my $no_of_files = @$files;

    # For each attachment in the email...
    for ( my $count = 0 ; $count < $no_of_files ; $count++ ) {
        my $file = File::Spec->catfile( $dir, $ae->files->[$count] );
        store_sample( $file );
    }
}

########################################################
# Helper function. Writes file using string as content #
########################################################
sub string_to_file {
    my ( $filename, $data ) = @_;

    print "DEBUG: string_to_file( " . $filename . " );\n";

    open( OUTFILE, ">$filename" );
    print OUTFILE $data;
    close(OUTFILE);
}

###########################################
# Helper function. Reads file into string #
###########################################
sub file_to_string {
    my $filename = shift;
    my $string;

    print "DEBUG: file_to_string( " . $filename . " );\n";

    open( INFILE, "<$filename" );
    while (<INFILE>) {
        $string = $string . $_;
    }
    close(INFILE);
    return $string;
}

##########################################################################
# A small helper function so sha256 works the same way sha1 and md5 does #
##########################################################################
sub my_sha256_hex {
    my $filename = shift;
    my $sha256   = Digest::SHA256::new("256");

    print "DEBUG: my_sha256_hex( " . $filename . " );\n";

    $sha256->reset();
    $sha256->addfile($filename);
    my $result = $sha256->hexdigest();    # Calculate SHA256 checksum
    $result =~ s/\ //g;    # Remove the spaces from the SHA256 checksum

    return $result;
}

##########################################################################
# A small helper function so sha256 works the same way sha1 and md5 does #
##########################################################################
sub my_md5_hex {
    my $filename = shift;

    print "DEBUG: my_md5_hex( " . $filename . " );\n";
    my $result = file_md5_hex($filename);
    return $result;
}

##########################################################################
# A small helper function so sha256 works the same way sha1 and md5 does #
##########################################################################
sub my_sha1_hex {
    my $filename = shift;

    print "DEBUG: my_sha1_hex( " . $filename . " );\n";
    my $result = sha1_hex( file_to_string($filename) );
    return $result;
}

#################################################
# Save the Sample to S3 and record the metadata #
#################################################
sub store_sample() {
    my $filename = shift;

    print "DEBUG: store_sample( " . $filename . " );\n";

    $metadata{'original_filename'} = basename($filename);

    ########################
    # Checksum the payload #
    ########################

    $metadata{'sha256'} = my_sha256_hex($filename);  # Calculate SHA256 checksum
    $metadata{'sha1'}   = my_sha1_hex($filename);    # Calculate SHA1 checksum
    $metadata{'md5'}    = my_md5_hex($filename);     # Calculate MD5 checksum

    ########################
    # Create a ZIP archive #
    ########################

    # Define the filename of the ZIP archive
    $metadata{'zipname'} = $metadata{'sha256'} . ".zip";

    # Zip the payload
    my $zip = Archive::Zip->new();

    #$zip->addString( $payload, $filename );
    $zip->addFile( $filename, $metadata{'original_filename'} );
    $zip->writeToFileNamed( $dir . $metadata{'zipname'} );

    ################################
    # Upload the ZIP archive to S3 #
    ################################

    # Define where the file will be stored
    $metadata{'full_filepath'} =
      $metadata{'bucketpath'} . "/" . $metadata{'zipname'};

    $bucket->add_key_filename( $metadata{'full_filepath'},
        $dir . $metadata{'zipname'} );

    # Delete the temp ZIP file
    unlink( $dir . $metadata{'zipname'} );

    ###############################
    # Upload metadata to SimpleDB #
    ###############################

    # TODO: Upload the MetaData to SimpleDB

    ########################
    # Create SQS Ticket(s) #
    ########################

    # TODO: Create SQS Ticket(s)
    dump_meta;
}

# FIXME: Should be it's own program, grabbing metadata from SimpleDB
sub update_wiki() {
    #######################
    # Upload data to Wiki #
    #######################

    print "DEBUG: update_wiki();\n";

    ###############################
    # Setup MediaWiki environment #
    ###############################

    my $mw = CMS::MediaWiki->new(
        host => $config{'mediawiki_host'},
        path => $config{'mediawiki_path'}
    );

    $mw->login(
        user => $config{'mediawiki_username'},
        pass => $config{'mediawiki_password'}
    );

    # Download Template page
    my $wiki_text = $mw->getPage( title => 'SampleTemplate' );

    # Create a new page from the template page
    $mw->editPage(
        title   => $metadata{'sha256'},
        text    => $wiki_text,
        summary => "Copied template"
    );

    # Edit the "Sample Information" section
    $wiki_text =
        "== Sample Information ==\n"
      . "\'\'\'Submitted by:\'\'\' "
      . $metadata{'From'}
      . "<br />\n"
      . "\'\'\'Date submitted:\'\'\' "
      . $metadata{'sent_DateTime'}->ymd("-")
      . "<br />\n"
      . "\'\'\'Date received:\'\'\' "
      . $metadata{'rcvd_DateTime'}->ymd("-")
      . "<br />\n"
      . "\'\'\'Original filename:\'\'\' "
      . $metadata{'original_filename'}
      . "<br />\n" . "\n"
      . "\'\'\'MD5  Checksum:\'\'\' "
      . $metadata{'md5'}
      . "<br />\n"
      . "\'\'\'SHA1 Checksum:\'\'\' "
      . $metadata{'sha1'}
      . "<br />\n"
      . "\'\'\'SHA256 Checksum:\'\'\' "
      . $metadata{'sha256'}
      . "<br />\n" . "\n"
      . "=== Sample Download ===\n"
      . "[http://"
      . $config{bucketname} . "/"
      . $metadata{'full_filepath'}
      . " Sample available to verified malware researchers]\n";

    $mw->editPage(
        title   => $metadata{'sha256'},
        section => 'Sample Information',
        text    => $wiki_text,
        summary => "Updated ==Sample Information=="
    );
}

