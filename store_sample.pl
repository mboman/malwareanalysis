#!/usr/bin/perl

# Stop us from shooting outselves in the foot
use strict;
use warnings;
use Switch;

# We need to parse emails
use Email::Simple;
use Email::MIME::Attachment::Stripper;
use Date::Format;
use DateTime::Format::Mail;

# We need to calculate checksums
use Digest::SHA256;
use Digest::SHA1 qw( sha1_hex );
use Digest::MD5 qw( md5_hex );

# We need to handle compression
use Archive::Zip;
use Archive::Extract;
use File::Temp qw( tempfile tempdir );

# We need to interact with Amazon S3
use Net::Amazon::S3;
use Net::Amazon::S3::Bucket;

# We need to interact with Amazon SimpleDB
#use Amazon::SimpleDB;
#use Amazon::SimpleDB::Domain;

# We need to interact with MediaWiki
use CMS::MediaWiki;

sub dump_meta;
sub file_to_string;
sub sha256_hex;
sub store_sample;
sub string_to_file;
sub unpack_attachment_zip;
sub update_wiki;

# We need to interact with Amazon SQS

# Configuration
my %config = (

    # We really should locate the credentials to a config file
    'aws_access_key_id'     => 'AWS_ACCESS_KEY_ID',
    'aws_secret_access_key' => 'AWS_SECRET_ACCESS_KEY',
    'mediawiki_username'    => 'WIKI_USERNAME',
    'mediawiki_password'    => 'WIKI_PASSWORD',

    # Less dynamic settings
    'bucketname'     => 'samples.malwaredatabase.net',
    'simpledb_name'  => 'samples.malwaredatabase.net',
    'mediawiki_host' => 'www.malwaredatabase.net',
    'mediawiki_path' => 'w'
);

# BEGIN
# Our variables..
my %metadata = ();
my $response;
my $raw_input;

# Setup the environment
$metadata{'rcvd_DateTime'} = DateTime->now();

############################
# Setup the S3 environment #
############################

my $s3 = Net::Amazon::S3->new(
    aws_access_key_id     => $config{'aws_access_key_id'},
    aws_secret_access_key => $config{'aws_secret_access_key'},
    retry                 => 1
);

my $bucket = $s3->bucket( $config{'bucketname'} );

##################################
# Setup the SimpleDB environment #
##################################

#my $simpledb = Amazon::SimpleDB->new(
#    aws_access_key_id     => $config{'aws_access_key_id'},
#    aws_secret_access_key => $config{'aws_secret_access_key'}
#);

#$simpledb->create_domain($config{'simpledb_name'});

# Concatinate the input to a single string
while (<STDIN>) {
    $raw_input = $raw_input . $_;
}

my $email    = Email::Simple->new($raw_input);
my $stripper = Email::MIME::Attachment::Stripper->new($raw_input);

# Extract the header metadata
$metadata{'From'} = $email->header("From");
$metadata{'sent_DateTime'} =
  DateTime::Format::Mail->parse_datetime( $email->header("Date") );

# Convert the timestamps to GMT timezone
$metadata{'sent_DateTime'}->set_time_zone("GMT");
$metadata{'rcvd_DateTime'}->set_time_zone("GMT");

$metadata{'bucketpath'} = $metadata{'sent_DateTime'}->ymd("/");

# Extract the attachments
my @attachments       = $stripper->attachments;
my $no_of_attachments = scalar(@attachments);

# For each attachment in the email...
for ( my $count = 0 ; $count < $no_of_attachments ; $count++ ) {

    # What kind of content do we have?
    switch ( $attachments[$count]{'content_type'} ) {
        case /application\/x-msdos-program/ {
            store_sample(
                $attachments[$count]{'filename'},
                $attachments[$count]{'payload'}
            );
        }
        case /application\/zip/ {
            unpack_attachment_zip(
                $attachments[$count]{'filename'},
                $attachments[$count]{'payload'}
            );
        }
        case /application\/rar/ {
            unpack_attachment_rar(
                $attachments[$count]{'filename'},
                $attachments[$count]{'payload'}
            );
        }
    }
}

sub dump_meta() {
    #####################
    # "Debugging" tools #
    #####################

    print "\nvvvv DUMP OF METADATA vvvvv\n";
    for my $key ( keys %metadata ) {
        my $value = $metadata{$key};
        print "$key => $value\n";
    }
    print "^^^^ DUMP OF METADATA ^^^^^\n\n";
}

#######################
# Extract the archive #
#######################
sub unpack_attachment_zip {
    my ( $filename, $data ) = @_;
    my $path = "/tmp";

    string_to_file( $filename, $data );

    my $ae = Archive::Extract->new( archive => $filename );
    my $ok = $ae->extract( to => $path );
    my $files = $ae->files;

    my $no_of_files = @$files;

    # For each attachment in the email...
    for ( my $count = 0 ; $count < $no_of_files ; $count++ ) {
        my $file = File::Spec->catfile( $path, $ae->files->[$count] );
        $data = file_to_string($file);
        store_sample( $file, $data );
    }
}

sub string_to_file {
    my ( $filename, $data ) = @_;

    print "DEBUG: string_to_file( " . $filename . ");\n";

    open( OUTFILE, ">$filename" );
    print OUTFILE $data;
    close(OUTFILE);
}

sub file_to_string {
    my $filename = shift;
    my $string;

    print "DEBUG: file_to_string( " . $filename . ");\n";

    open( INFILE, "<$filename" );
    while (<INFILE>) {
        $string = $string . $_;
    }
    close(INFILE);
    return $string;
}

sub sha256_hex {
    my $data = shift;

    my $sha256 = Digest::SHA256::new("256");
    $sha256->reset();
    $sha256->add($data);
    my $result = $sha256->hexdigest();    # Calculate SHA256 checksum
    $result =~ s/\ //g;    # Remove the spaces from the SHA256 checksum
    return $result;
}

sub store_sample() {
    my ( $filename, $payload ) = @_;

    print "DEBUG: store_sample( " . $filename . " );\n";

    $metadata{'original_filename'} = $filename;

    ########################
    # Checksum the payload #
    ########################

    $metadata{'sha256'} = sha256_hex($payload);    # Calculate SHA256 checksum
    $metadata{'sha1'}   = sha1_hex($payload);      # Calculate SHA1 checksum
    $metadata{'md5'}    = md5_hex($payload);       # Calculate MD5 checksum

    ########################
    # Create a ZIP archive #
    ########################

    # Define the filename of the ZIP archive
    $metadata{'zipname'} = $metadata{'sha256'} . ".zip";

    # Zip the payload
    my $zip = Archive::Zip->new();
    $zip->addString( $payload, $filename );
    $zip->writeToFileNamed( $metadata{'zipname'} )
      ;    # FIXME: Temporarly, can't figure out how to compress into a variable

    ################################
    # Upload the ZIP archive to S3 #
    ################################

    # Define where the file will be stored
    $metadata{'full_filepath'} =
      $metadata{'bucketpath'} . "/" . $metadata{'zipname'};

    $bucket->add_key_filename( $metadata{'full_filepath'},
        $metadata{'zipname'} );

    # Delete the temp ZIP file
    #unlink( $metadata{'zipname'} );

    ###############################
    # Upload metadata to SimpleDB #
    ###############################

    # TODO: Upload the MetaData to SimpleDB

    ########################
    # Create SQS Ticket(s) #
    ########################

    # TODO: Create SQS Ticket(s)
    dump_meta;
}

# FIXME: Should be it's own program, grabbing metadata from SimpleDB
sub update_wiki() {
    #######################
    # Upload data to Wiki #
    #######################

    ###############################
    # Setup MediaWiki environment #
    ###############################

    my $mw = CMS::MediaWiki->new(
        host => $config{'mediawiki_host'},
        path => $config{'mediawiki_path'}
    );

    $mw->login(
        user => $config{'mediawiki_username'},
        pass => $config{'mediawiki_password'}
    );

    # Download Template page
    my $wiki_text = $mw->getPage( title => 'SampleTemplate' );

    # Create a new page from the template page
    $mw->editPage(
        title   => $metadata{'sha256'},
        text    => $wiki_text,
        summary => "Copied template"
    );

    # Edit the "Sample Information" section
    $wiki_text =
        "== Sample Information ==\n"
      . "\'\'\'Submitted by:\'\'\' "
      . $metadata{'From'}
      . "<br />\n"
      . "\'\'\'Date submitted:\'\'\' "
      . $metadata{'sent_DateTime'}->ymd("-")
      . "<br />\n"
      . "\'\'\'Date received:\'\'\' "
      . $metadata{'rcvd_DateTime'}->ymd("-")
      . "<br />\n"
      . "\'\'\'Original filename:\'\'\' "
      . $metadata{'original_filename'}
      . "<br />\n" . "\n"
      . "\'\'\'MD5  Checksum:\'\'\' "
      . $metadata{'md5'}
      . "<br />\n"
      . "\'\'\'SHA1 Checksum:\'\'\' "
      . $metadata{'sha1'}
      . "<br />\n"
      . "\'\'\'SHA256 Checksum:\'\'\' "
      . $metadata{'sha256'}
      . "<br />\n" . "\n"
      . "=== Sample Download ===\n"
      . "[http://"
      . $config{bucketname} . "/"
      . $metadata{'full_filepath'}
      . " Sample available to verified malware researchers]\n";

    $mw->editPage(
        title   => $metadata{'sha256'},
        section => 'Sample Information',
        text    => $wiki_text,
        summary => "Updated ==Sample Information=="
    );
}

